{
    "network": "hardhat",
    "contract": "ProxyUUPS",
    "address": "0x175e18B65956AccD990bFD5107421353be849494",
    "deployed": false,
    "error": {
        "stackTrace": [
            {
                "type": 0,
                "sourceReference": {
                    "function": "deploy",
                    "contract": "Create2DeployerLocal",
                    "sourceName": "xdeployer/src/contracts/Create2Deployer.sol",
                    "sourceContent": "// SPDX-License-Identifier: MIT\n// Further information: https://eips.ethereum.org/EIPS/eip-1014\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\n/**\n * @title CREATE2 Deployer Smart Contract\n * @author Pascal Marco Caversaccio, pascal.caversaccio@hotmail.ch\n * @dev Helper smart contract to make easier and safer usage of the\n * `CREATE2` EVM opcode. `CREATE2` can be used to compute in advance\n * the address where a smart contract will be deployed, which allows\n * for interesting new mechanisms known as 'counterfactual interactions'.\n */\n\ncontract Create2Deployer is Ownable, Pausable {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the\n     * contract will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `value`.\n     * - if `value` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 value,\n        bytes32 salt,\n        bytes memory code\n    ) public whenNotPaused {\n        Create2.deploy(value, salt, code);\n    }\n\n    /**\n     * @dev Deployment of the {ERC1820Implementer}.\n     * Further information: https://eips.ethereum.org/EIPS/eip-1820\n     */\n    function deployERC1820Implementer(uint256 value, bytes32 salt) public whenNotPaused {\n        Create2.deploy(value, salt, type(ERC1820Implementer).creationCode);\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}.\n     * Any change in the `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 codeHash) public view returns (address) {\n        return Create2.computeAddress(salt, codeHash);\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a\n     * contract located at `deployer`. If `deployer` is this contract's address, returns the\n     * same value as {computeAddress}.\n     */\n    function computeAddressWithDeployer(\n        bytes32 salt,\n        bytes32 codeHash,\n        address deployer\n    ) public pure returns (address) {\n        return Create2.computeAddress(salt, codeHash, deployer);\n    }\n\n    /**\n     * @dev Contract can receive ether. However, the only way to transfer this ether is\n     * to call the function `killCreate2Deployer`.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Triggers stopped state.\n     * Requirements: The contract must not be paused.\n     */\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Returns to normal state.\n     * Requirements: The contract must be paused.\n     */\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Destroys the Create2Deployer contract and transfers all ether to a pre-defined payout address.\n     * @notice Using the `CREATE2` EVM opcode always allows to redeploy a new smart contract to a\n     * previously seldestructed contract address. However, if a contract creation is attempted,\n     * due to either a creation transaction or the `CREATE`/`CREATE2` EVM opcode, and the destination\n     * address already has either nonzero nonce, or non-empty code, then the creation throws immediately,\n     * with exactly the same behavior as would arise if the first byte in the init code were an invalid opcode.\n     * This applies retroactively starting from genesis.\n     */\n    function killCreate2Deployer(address payable payoutAddress) public onlyOwner {\n        payoutAddress.transfer(address(this).balance);\n        selfdestruct(payoutAddress);\n    }\n}\n",
                    "line": 39,
                    "range": [
                        1492,
                        1525
                    ]
                },
                "functionType": 1
            },
            {
                "type": 4,
                "sourceReference": {
                    "function": "whenNotPaused",
                    "contract": "Create2DeployerLocal",
                    "sourceName": "@openzeppelin/contracts/security/Pausable.sol",
                    "sourceContent": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n",
                    "line": 52,
                    "range": [
                        1403,
                        1441
                    ]
                },
                "message": {
                    "value": {
                        "type": "Buffer",
                        "data": [
                            8,
                            195,
                            121,
                            160,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            32,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            25,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            50,
                            58,
                            32,
                            70,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            100,
                            101,
                            112,
                            108,
                            111,
                            121,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0
                        ]
                    },
                    "_selector": "08c379a0"
                },
                "isInvalidOpcodeError": false
            }
        ],
        "data": "0x08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000019437265617465323a204661696c6564206f6e206465706c6f7900000000000000",
        "transactionHash": "0xa2561a5fb73bef8cad98230fa83b9462928a47f3631d53fd56425db5fe223cbd"
    }
}